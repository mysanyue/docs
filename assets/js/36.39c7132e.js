(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{398:function(v,_,e){"use strict";e.r(_);var t=e(49),o=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h2",{attrs:{id:"原型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型"}},[v._v("#")]),v._v(" 原型")]),v._v(" "),e("p",[v._v("构造函数 ，是一种特殊的方法。主要用来在创建对象时初始化对象。每个构造函数都有 prototype(原型)属性，每个函数都有 "),e("code",[v._v("prototype")]),v._v("(原型)属性，这个属性是一个指针，指向一个对象，这个对象的用途是包含特定类型的所有实例共享的属性和方法，即这个原型对象是用来给实例共享属性和方法的。而每个实例内部都有一个指向原型对象的指针。")]),v._v(" "),e("h2",{attrs:{id:"构造函数-是一种特殊的方法。主要用来在创建对象时初始化对象。每个构造函数都有-prototype-原型-属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造函数-是一种特殊的方法。主要用来在创建对象时初始化对象。每个构造函数都有-prototype-原型-属性"}},[v._v("#")]),v._v(" 构造函数 ，是一种特殊的方法。主要用来在创建对象时初始化对象。每个构造函数都有 prototype(原型)属性")]),v._v(" "),e("p",[v._v("每个函数都有 "),e("code",[v._v("prototype")]),v._v("(原型)属性，这个属性是一个指针，指向一个对象，这个对象的用途是包含特定类型的所有实例共享的属性和方法，即这个原型对象是用来给实例共享属性和方法的。而每个实例内部都有一个指向原型对象的指针。")]),v._v(" "),e("h2",{attrs:{id:"原型链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[v._v("#")]),v._v(" 原型链")]),v._v(" "),e("p",[v._v("提到原型链就不得不提原型的继承，继承的完美实现方案是借助寄生组合继承，主要实现原理 "),e("code",[v._v("PersonB.prototype = Object.create(PersonA.prototype)")]),v._v("实现来继承 "),e("code",[v._v("PersonA")]),v._v(" 的原型，当我们通过 "),e("code",[v._v("new")]),v._v(" 关键字实例化的对象身上就有了 PersonB 自身的属性和方法，也有了 "),e("code",[v._v("PersonA")]),v._v("的原型方法，当实例化对象调用某个方法时会先在自身和原型上查找，然后是在"),e("code",[v._v("proto")]),v._v("上一层层查找，这种方式就是原型链。")]),v._v(" "),e("h2",{attrs:{id:"vuex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[v._v("#")]),v._v(" vuex")]),v._v(" "),e("p",[e("code",[v._v("Vuex")]),v._v(" 是一个专为 "),e("code",[v._v("Vue.js")]),v._v(" 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。"),e("br"),v._v(" "),e("code",[v._v("tate")]),v._v("："),e("code",[v._v("Vuex")]),v._v(" 使用单一状态树——是的，用一个对象就包含了全部的应用层级状态。"),e("br"),v._v(" "),e("code",[v._v("mutation")]),v._v("：更改 "),e("code",[v._v("Vuex")]),v._v(" 的 "),e("code",[v._v("store")]),v._v(" 中的状态的唯一方法是提交 "),e("code",[v._v("mutation")]),v._v(" "),e("br"),v._v(" "),e("code",[v._v("action")]),v._v(": "),e("code",[v._v("action")]),v._v(" 提交的是 "),e("code",[v._v("mutation")]),v._v("，而不是直接变更状态。"),e("code",[v._v("action")]),v._v(" 可以包含任意异步操作。"),e("br"),v._v(" "),e("code",[v._v("getter")]),v._v(": 相当于 "),e("code",[v._v("Vue")]),v._v(" 中的 "),e("code",[v._v("computed")]),v._v(" 计算属性"),e("br")]),v._v(" "),e("h2",{attrs:{id:"vue-router"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-router"}},[v._v("#")]),v._v(" vue-router")]),v._v(" "),e("p",[e("code",[v._v("Vue Router")]),v._v(" 是 "),e("code",[v._v("Vue.js")]),v._v(" 官方的路由管理器。它和 "),e("code",[v._v("Vue.js")]),v._v(" 的核心深度集成，让构建单页面应用变得易如反掌"),e("code",[v._v("<router-link>")]),v._v("和"),e("code",[v._v("<router-view>")]),v._v("和"),e("code",[v._v("<keep-alive>")])]),v._v(" "),e("h2",{attrs:{id:"深拷贝浅拷贝"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝浅拷贝"}},[v._v("#")]),v._v(" 深拷贝浅拷贝")]),v._v(" "),e("p",[v._v("深拷贝：\n通过利用 "),e("code",[v._v("JSON.parse(JSON.stringify(Object))")]),v._v("来达到深拷贝的目的\n但是 "),e("code",[v._v("JSON")]),v._v(" 深拷贝的缺点是 "),e("code",[v._v("undefined")]),v._v(" 和 "),e("code",[v._v("function")]),v._v(" 还有 "),e("code",[v._v("symbol")]),v._v(" 类型是无法进行深拷贝的\n如有需要可以自己手动封装函数来达到目的\n浅拷贝：\n通过 "),e("code",[v._v("ES6")]),v._v(" 新特性 "),e("code",[v._v("Object.assign()")]),v._v("与扩展运算符来达到浅拷贝的目的")]),v._v(" "),e("h2",{attrs:{id:"vue-通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-通信"}},[v._v("#")]),v._v(" Vue 通信")]),v._v(" "),e("p",[v._v("第一种："),e("code",[v._v("props")]),v._v(" 和"),e("code",[v._v("$emit")]),v._v("\n第二种：中央事件总线 "),e("code",[v._v("EventBus")]),v._v("(基本不用)\n第三种："),e("code",[v._v("vuex")]),v._v("（状态管理器）\n第四种："),e("code",[v._v("$parent")]),v._v(" 和 "),e("code",[v._v("\\$children")]),v._v("\n当然还有其他办法，但是基本不常用")]),v._v(" "),e("h2",{attrs:{id:"你在工作中遇到那些问题-解决方法是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#你在工作中遇到那些问题-解决方法是什么"}},[v._v("#")]),v._v(" 你在工作中遇到那些问题，解决方法是什么")]),v._v(" "),e("p",[v._v("经常遇到的问题就是 "),e("code",[v._v("Cannot read property ‘prototype’ of undefined")]),v._v("\n解决办法通过浏览器报错提示代码定位问题，解决问题")]),v._v(" "),e("p",[e("code",[v._v("Vue")]),v._v(" 项目中遇到视图不更新，方法不执行，埋点不触发等问题\n一般解决方案查看浏览器报错，查看代码运行到那个阶段未之行结束，阅读源码以及相关文档等\n然后举出来最近开发的项目中遇到的算是两个比较大的问题。")]),v._v(" "),e("h2",{attrs:{id:"webpack-配置入口出口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack-配置入口出口"}},[v._v("#")]),v._v(" webpack 配置入口出口")]),v._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[v._v("module"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("exports "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//入口文件的配置项")]),v._v("\n  entry"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//出口文件的配置项")]),v._v("\n  output"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//模块：例如解读 CSS,图片如何转换，压缩")]),v._v("\n  module"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//插件，用于生产模版和各项功能")]),v._v("\n  plugins"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//配置 webpack 开发服务功能")]),v._v("\n  devServer"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])])]),e("p",[v._v("简单描述了一下这几个属性是干什么的。"),e("br")]),v._v(" "),e("h2",{attrs:{id:"webpack3-和-webpack4-区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack3-和-webpack4-区别"}},[v._v("#")]),v._v(" webpack3 和 webpack4 区别")]),v._v(" "),e("ol",[e("li",[e("p",[e("code",[v._v("mode")]),e("br")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("webpack")]),v._v(" 增加了一个 "),e("code",[v._v("mode")]),v._v(" 配置，只有两种值 "),e("code",[v._v("development | production")]),v._v("。对不同的环境他会启用不同的配置。")])])]),v._v(" "),e("li",[e("p",[e("code",[v._v("CommonsChunkPlugin")])]),v._v(" "),e("ul",[e("li",[e("code",[v._v("CommonChunksPlugin")]),v._v(" 已经从 "),e("code",[v._v("webpack4")]),v._v("中移除。")]),v._v(" "),e("li",[v._v("可使用 "),e("code",[v._v("optimization.splitChunks")]),v._v(" 进行模块划分（提取公用代码）。")]),v._v(" "),e("li",[v._v("但是需要注意一个问题，默认配置只会对异步请求的模块进行提取拆分，如果要对 "),e("code",[v._v("entry")]),v._v(" 进行拆分")]),v._v(" "),e("li",[v._v("需要设置 "),e("code",[v._v("optimization.splitChunks.chunks = 'all'")]),v._v("。")])])]),v._v(" "),e("li",[e("p",[e("code",[v._v("webpack4")]),v._v(" 使用 "),e("code",[v._v("MiniCssExtractPlugin")]),v._v(" 取代 "),e("code",[v._v("ExtractTextWebpackPlugin")]),v._v("。")])]),v._v(" "),e("li",[e("p",[v._v("代码分割")]),v._v(" "),e("ul",[e("li",[v._v("使用动态 "),e("code",[v._v("import")]),v._v("，而不是用 "),e("code",[v._v("system.import")]),v._v(" 或者 "),e("code",[v._v("require.ensure")])])])]),v._v(" "),e("li",[e("p",[e("code",[v._v("vue-loader")])]),v._v(" "),e("ul",[e("li",[v._v("使用 "),e("code",[v._v("vue-loader")]),v._v(" 插件为"),e("code",[v._v(".vue")]),v._v(" 文件中的各部分使用相对应的 "),e("code",[v._v("loader")]),v._v("，比如 "),e("code",[v._v("css-loader")]),v._v(" 等")])])]),v._v(" "),e("li",[e("p",[e("code",[v._v("UglifyJsPlugin")])]),v._v(" "),e("ul",[e("li",[v._v("现在也不需要使用这个 "),e("code",[v._v("plugin")]),v._v(" 了，只需要使用 "),e("code",[v._v("optimization.minimize")]),v._v(" 为 "),e("code",[v._v("true")]),v._v(" 就行，"),e("code",[v._v("production mode")]),v._v(" 下面自动为 "),e("code",[v._v("true")])]),v._v(" "),e("li",[e("code",[v._v("optimization.minimizer")]),v._v(" 可以配置你自己的压缩程序")])])])]),v._v(" "),e("h2",{attrs:{id:"陈述输入-url-回车后的过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#陈述输入-url-回车后的过程"}},[v._v("#")]),v._v(" 陈述输入 "),e("code",[v._v("URL")]),v._v(" 回车后的过程")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("读取缓存：")]),v._v(" "),e("ul",[e("li",[v._v("搜索自身的 "),e("code",[v._v("DNS")]),v._v(" 缓存。(如果 "),e("code",[v._v("DNS")]),v._v(" 缓存中找到 "),e("code",[v._v("IP")]),v._v(" 地址就跳过了接下来查找 "),e("code",[v._v("IP")]),v._v(" 地址步骤，直接访问该 "),e("code",[v._v("IP")]),v._v(" 地址。)")])])]),v._v(" "),e("li",[e("p",[e("code",[v._v("DNS")]),v._v(" 解析:将域名解析成 "),e("code",[v._v("IP")]),v._v(" 地址")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("TCP")]),v._v(" 连接："),e("code",[v._v("TCP")]),v._v(" 三次握手，简易描述三次握手")]),v._v(" "),e("ul",[e("li",[v._v("客户端：服务端你在么？")]),v._v(" "),e("li",[v._v("服务端：客户端我在，你要连接我么？")]),v._v(" "),e("li",[v._v("客户端：是的服务端，我要链接。")]),v._v(" "),e("li",[v._v("连接打通，可以开始请求来")])])]),v._v(" "),e("li",[e("p",[v._v("发送 "),e("code",[v._v("HTTP")]),v._v(" 请求")])]),v._v(" "),e("li",[e("p",[v._v("服务器处理请求并返回 "),e("code",[v._v("HTTP")]),v._v(" 报文")])]),v._v(" "),e("li",[e("p",[v._v("浏览器解析渲染页面")])]),v._v(" "),e("li",[e("p",[v._v("断开连接："),e("code",[v._v("TCP")]),v._v(" 四次挥手")])])]),v._v(" "),e("p",[v._v("关于第六步浏览器解析渲染页面又可以聊聊如果返回的是 html 页面"),e("br")]),v._v(" "),e("ul",[e("li",[v._v("根据 "),e("code",[v._v("HTML")]),v._v(" 解析出 "),e("code",[v._v("DOM")]),v._v(" 树")]),v._v(" "),e("li",[v._v("根据 "),e("code",[v._v("CSS")]),v._v(" 解析生成 "),e("code",[v._v("CSS")]),v._v(" 规则树")]),v._v(" "),e("li",[v._v("结合 "),e("code",[v._v("DOM")]),v._v(" 树和 "),e("code",[v._v("CSS")]),v._v(" 规则树，生成渲染树")]),v._v(" "),e("li",[v._v("根据渲染树计算每一个节点的信息")]),v._v(" "),e("li",[v._v("根据计算好的信息绘制页面")])]),v._v(" "),e("h2",{attrs:{id:"陈述-http"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#陈述-http"}},[v._v("#")]),v._v(" 陈述 http")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("基本概念：")]),v._v(" "),e("p",[e("code",[v._v("HTTP")]),v._v("，全称为 "),e("code",[v._v("HyperText Transfer Protocol")]),v._v("，即为超文本传输协议。是互联网应用最为广泛的一种网络协议\n所有的 "),e("code",[v._v("www")]),v._v(" 文件都必须遵守这个标准。"),e("br")])]),v._v(" "),e("li",[e("p",[v._v("http 特性：")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("HTTP")]),v._v(" 是无连接无状态的")]),v._v(" "),e("li",[e("code",[v._v("HTTP")]),v._v(" 一般构建于 "),e("code",[v._v("TCP/IP")]),v._v(" 协议之上，默认端口号是 "),e("code",[v._v("80")])]),v._v(" "),e("li",[e("code",[v._v("HTTP")]),v._v(" 可以分为两个部分，即请求和响应。")])])]),v._v(" "),e("li",[e("p",[e("code",[v._v("http")]),v._v(" 请求：")]),v._v(" "),e("p",[e("code",[v._v("HTTP")]),v._v(" 定义了在与服务器交互的不同方式，最常用的方法有 4 种"),e("br"),v._v("\n分别是 "),e("code",[v._v("GET，POST，PUT， DELETE")]),v._v("。URL 全称为资源描述符，可以这么认为：一个 URL 地址"),e("br"),v._v("\n对应着一个网络上的资源，而 HTTP 中的 GET，POST，PUT，DELETE"),e("br"),v._v("\n就对应着对这个资源的查询，修改，增添，删除 4 个操作。"),e("br")]),v._v(" "),e("p",[e("code",[v._v("HTTP")]),v._v(" 请求由 3 个部分构成，分别是：状态行，请求头"),e("code",[v._v("(Request Header)")]),v._v("，请求正文。"),e("br")]),v._v(" "),e("p",[e("code",[v._v("HTTP")]),v._v(" 响应由 3 个部分构成，分别是：状态行，响应头"),e("code",[v._v("(Response Header)")]),v._v("，响应正文。"),e("br")]),v._v(" "),e("p",[e("code",[v._v("HTTP")]),v._v(" 响应中包含一个状态码，用来表示服务器对客户端响应的结果。"),e("br"),v._v("\n状态码一般由 3 位构成："),e("br")]),v._v(" "),e("p",[v._v("1xx : 表示请求已经接受了，继续处理。"),e("br"),v._v("\n2xx : 表示请求已经处理掉了。"),e("br"),v._v("\n3xx : 重定向。"),e("br"),v._v("\n4xx : 一般表示客户端有错误，请求无法实现。"),e("br"),v._v("\n5xx : 一般为服务器端的错误。"),e("br")]),v._v(" "),e("p",[v._v("比如常见的状态码："),e("br")]),v._v(" "),e("p",[e("code",[v._v("200 OK")]),v._v(" 客户端请求成功。"),e("br"),v._v(" "),e("code",[v._v("301 Moved Permanently")]),v._v(" 请求永久重定向。"),e("br"),v._v(" "),e("code",[v._v("302 Moved Temporarily")]),v._v(" 请求临时重定向。"),e("br"),v._v(" "),e("code",[v._v("304 Not Modified")]),v._v(" 文件未修改，可以直接使用缓存的文件。"),e("br"),v._v(" "),e("code",[v._v("400 Bad Request")]),v._v(" 由于客户端请求有语法错误，不能被服务器所理解。"),e("br"),v._v(" "),e("code",[v._v("401 Unauthorized")]),v._v(" 请求未经授权，无法访问。"),e("br"),v._v(" "),e("code",[v._v("403 Forbidden")]),v._v(" 服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因。"),e("br"),v._v(" "),e("code",[v._v("404 Not Found")]),v._v(" 请求的资源不存在，比如输入了错误的 URL。"),e("br"),v._v(" "),e("code",[v._v("500 Internal Server Error")]),v._v(" 服务器发生不可预期的错误，导致无法完成客户端的请求。"),e("br"),v._v(" "),e("code",[v._v("503 Service Unavailable")]),v._v(" 服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常。"),e("br")]),v._v(" "),e("p",[v._v("大概还有一些关于 hhtp 请求和响应头信息的介绍。"),e("br")])])]),v._v(" "),e("h2",{attrs:{id:"说说-vue-原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说说-vue-原理"}},[v._v("#")]),v._v(" 说说 Vue 原理")]),v._v(" "),e("p",[e("code",[v._v("Vue")]),v._v(" 是采用数据劫持配合发布者-订阅者模式，通过 "),e("code",[v._v("Object.defineProperty")]),v._v(" 来()来劫持各个属性的 "),e("code",[v._v("getter")]),v._v(" 和 "),e("code",[v._v("setter")]),v._v("在数据发生变化的时候，发布消息给依赖收集器，去通知观察者，做出对应的回调函数去更新视图。")]),v._v(" "),e("p",[v._v("具体就是："),e("br"),v._v(" "),e("code",[v._v("MVVM")]),v._v(" 作为绑定的入口，整合 "),e("code",[v._v("Observe,Compil")]),v._v(" 和 "),e("code",[v._v("Watcher")]),v._v(" 三者，通过 "),e("code",[v._v("Observe")]),v._v(" 来监听 "),e("code",[v._v("model")]),v._v(" 的变化"),e("br"),v._v("\n通过 "),e("code",[v._v("Compil")]),v._v(" 来解析编译模版指令，最终利用 "),e("code",[v._v("Watcher")]),v._v(" 搭起 "),e("code",[v._v("Observe")]),v._v(" 和 "),e("code",[v._v("Compil")]),v._v(" 之前的通信桥梁，从而达到数据变化 "),e("code",[v._v("=>")]),v._v(" 更新视图，视图交互变化"),e("code",[v._v("(input) =>")]),v._v(" 数据 "),e("code",[v._v("model")]),v._v(" 变更的双向绑定效果。")]),v._v(" "),e("h2",{attrs:{id:"vue-路由守卫有哪些-怎么设置-使用场景等"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-路由守卫有哪些-怎么设置-使用场景等"}},[v._v("#")]),v._v(" Vue 路由守卫有哪些，怎么设置，使用场景等")]),v._v(" "),e("p",[v._v("常用的两个路由守卫："),e("code",[v._v("router.beforeEach")]),v._v(" 和 "),e("code",[v._v("router.afterEach")]),e("br"),v._v("\n每个守卫方法接收三个参数：")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("to")]),v._v(": "),e("code",[v._v("Route")]),v._v(": 即将要进入的目标 路由对象")]),v._v(" "),e("li",[e("code",[v._v("from")]),v._v(": "),e("code",[v._v("Route")]),v._v(": 当前导航正要离开的路由")]),v._v(" "),e("li",[e("code",[v._v("next")]),v._v(": "),e("code",[v._v("Function")]),v._v(": 一定要调用该方法来 resolve 这个钩子。")])]),v._v(" "),e("p",[v._v("在项目中，一般在"),e("code",[v._v("beforeEach")]),v._v("这个钩子函数中进行路由跳转的一些信息判断。"),e("br"),v._v("\n判断是否登录，是否拿到对应的路由权限等等。"),e("br")]),v._v(" "),e("h2",{attrs:{id:"数组去重"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组去重"}},[v._v("#")]),v._v(" 数组去重")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("第一种：通过"),e("code",[v._v("ES6")]),v._v("新特性"),e("code",[v._v("Set()")]),v._v("\n例如："),e("br"),v._v("\nvar arr = [1, 2, 3, 1, 2];"),e("br"),v._v("\nvar newArr= [...new Set(arr)]"),e("br")])]),v._v(" "),e("li",[e("p",[v._v("第二种：封装函数利用 "),e("code",[v._v("{}")]),v._v(" 和 "),e("code",[v._v("[]")])])])]),v._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("uniqueEasy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("arr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("if")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("!")]),v._v("arr "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("instanceof")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Array")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("throw")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("Error")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v("'当前传入的不是数组'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("let")]),v._v(" list "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("let")]),v._v(" obj "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n  arr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("forEach")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("item")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=>")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("if")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("!")]),v._v("obj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),v._v("item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n      list"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("push")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n      obj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),v._v("item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[v._v("true")]),v._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("return")]),v._v(" list\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])])]),e("h2",{attrs:{id:"set-map-解构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#set-map-解构"}},[v._v("#")]),v._v(" Set,Map 解构")]),v._v(" "),e("ol",[e("li",[e("p",[e("code",[v._v("ES6")]),v._v(" 提供了新的数据结构 "),e("code",[v._v("Set")]),e("br"),v._v("\n它类似于数组，但是成员的值都是唯一的，没有重复的值。"),e("code",[v._v("Set")]),v._v(" 本身是一个构造函数，用来生成 "),e("code",[v._v("Set")]),v._v(" 数据结构。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("ES6")]),v._v(" 提供了 "),e("code",[v._v("Map")]),v._v(" 数据结构"),e("br"),v._v("\n它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。")])])]),v._v(" "),e("h2",{attrs:{id:"对数组排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对数组排序"}},[v._v("#")]),v._v(" 对数组排序")]),v._v(" "),e("ol",[e("li",[v._v("第一种方法利用 "),e("code",[v._v("sort")]),v._v(" 方法")]),v._v(" "),e("li",[v._v("第二种利用冒泡排序")])]),v._v(" "),e("h2",{attrs:{id:"说一说-js-是什么语言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说一说-js-是什么语言"}},[v._v("#")]),v._v(" 说一说 js 是什么语言")]),v._v(" "),e("p",[e("code",[v._v("js")]),v._v(" 是一种运行在浏览器的脚本语言，这种语言主要的功能是可以制作出动态的页面的效果\n我们可以通过 "),e("code",[v._v("js+css+html")]),v._v(" 布局来形成我们现在可以访问展示的页面"),e("br")]),v._v(" "),e("p",[e("code",[v._v("js")]),v._v(" 语言是弱语言类型， 因此我们在项目开发中当我们随意更改某个变量的数据类型后\n有可能会导致其他引用这个变量的方法中报错等等。"),e("br")]),v._v(" "),e("h2",{attrs:{id:"原型-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型-2"}},[v._v("#")]),v._v(" 原型")]),v._v(" "),e("p",[e("code",[v._v("JavaScript")]),v._v(" 中的对象都有一个特殊的 "),e("code",[v._v("prototype")]),v._v(" 内置属性，其实就是对其他对象的引用\n几乎所有的对象在创建时 "),e("code",[v._v("prototype")]),v._v(" 属性都会被赋予一个非空的值，我们可以把这个属性当作一个备用的仓库。"),e("br"),v._v("\n当试图引用对象的属性时会触发 "),e("code",[v._v("get")]),v._v(" 操作，第一步时检查对象本身是否有这个属性，如果有就使用它，没有就去原型中查找。一层层向上直到 "),e("code",[v._v("Object.prototype")]),v._v(" 顶层"),e("br")]),v._v(" "),e("p",[v._v("基于原型扩展描述一下原型链，什么是原型链，原型的继承，"),e("code",[v._v("ES5")]),v._v(" 和 "),e("code",[v._v("ES6")]),v._v(" 继承与不同点。")]),v._v(" "),e("h2",{attrs:{id:"es6-新特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es6-新特性"}},[v._v("#")]),v._v(" ES6 新特性")]),v._v(" "),e("ol",[e("li",[e("p",[e("code",[v._v("ES6")]),v._v("引入来严格模式\n变量必须声明后在使用"),e("br"),v._v("\n函数的参数不能有同名属性, 否则报错"),e("br"),v._v("\n不能使用"),e("code",[v._v("with")]),v._v("语句 (说实话我基本没用过)"),e("br"),v._v("\n不能对只读属性赋值, 否则报错"),e("br"),v._v("\n不能使用前缀 0 表示八进制数,否则报错 (说实话我基本没用过)"),e("br"),v._v("\n不能删除不可删除的数据, 否则报错"),e("br"),v._v("\n不能删除变量"),e("code",[v._v("delete prop")]),v._v(", 会报错, 只能删除属性"),e("code",[v._v("delete global[prop]")]),e("br"),v._v(" "),e("code",[v._v("eval")]),v._v("不会在它的外层作用域引入变量"),e("br"),v._v(" "),e("code",[v._v("eval")]),v._v("和"),e("code",[v._v("arguments")]),v._v("不能被重新赋值"),e("br"),v._v(" "),e("code",[v._v("arguments")]),v._v("不会自动反映函数参数的变化"),e("br"),v._v("\n不能使用"),e("code",[v._v("arguments.caller")]),v._v(" (说实话我基本没用过)"),e("br"),v._v("\n不能使用"),e("code",[v._v("arguments.callee")]),v._v(" (说实话我基本没用过)"),e("br"),v._v("\n禁止"),e("code",[v._v("this")]),v._v("指向全局对象"),e("br"),v._v("\n不能使用"),e("code",[v._v("fn.caller")]),v._v("和"),e("code",[v._v("fn.arguments")]),v._v("获取函数调用的堆栈 (说实话我基本没用过)"),e("br"),v._v("\n增加了保留字（比如"),e("code",[v._v("protected、static")]),v._v("和"),e("code",[v._v("interface")]),v._v("）"),e("br")])]),v._v(" "),e("li",[e("p",[v._v("关于"),e("code",[v._v("let")]),v._v("和"),e("code",[v._v("const")]),v._v("新增的变量声明")])]),v._v(" "),e("li",[e("p",[v._v("变量的解构赋值")])]),v._v(" "),e("li",[e("p",[v._v("字符串的扩展\n"),e("code",[v._v("includes()")]),v._v("：返回布尔值，表示是否找到了参数字符串。"),e("br"),v._v(" "),e("code",[v._v("startsWith()")]),v._v("：返回布尔值，表示参数字符串是否在原字符串的头部。"),e("br"),v._v(" "),e("code",[v._v("endsWith()")]),v._v("：返回布尔值，表示参数字符串是否在原字符串的尾部。"),e("br")])]),v._v(" "),e("li",[e("p",[v._v("数值的扩展\n"),e("code",[v._v("Number.isFinite()")]),v._v("用来检查一个数值是否为有限的"),e("code",[v._v("（finite）")]),v._v("。"),e("br"),v._v(" "),e("code",[v._v("Number.isNaN()")]),v._v("用来检查一个值是否为 NaN。"),e("br")])]),v._v(" "),e("li",[e("p",[v._v("函数的扩展\n函数参数指定默认值"),e("br")])]),v._v(" "),e("li",[e("p",[v._v("数组的扩展\n扩展运算符"),e("br")])]),v._v(" "),e("li",[e("p",[v._v("对象的扩展\n对象的解构"),e("br")])]),v._v(" "),e("li",[e("p",[v._v("新增"),e("code",[v._v("symbol")]),v._v("数据类型")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("Set")]),v._v(" 和 "),e("code",[v._v("Map")]),v._v(" 数据结构\n"),e("code",[v._v("ES6")]),v._v(" 提供了新的数据结构 "),e("code",[v._v("Set")]),v._v("。它类似于数组，但是成员的值都是唯一的，没有重复的值。"),e("br"),v._v(" "),e("code",[v._v("Set")]),v._v(" 本身是一个构造函数，用来生成 "),e("code",[v._v("Set")]),v._v(" 数据结构。"),e("br"),v._v(" "),e("code",[v._v("Map")]),v._v("它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。"),e("br")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("Proxy")]),v._v(" "),e("code",[v._v("Proxy")]),v._v(" 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。"),e("br"),v._v(" "),e("code",[v._v("Proxy")]),v._v(" 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。"),e("br"),v._v(" "),e("code",[v._v("Vue3.0")]),v._v(" 使用了 "),e("code",[v._v("proxy")]),e("br")])]),v._v(" "),e("li",[e("p",[v._v("Promise\n"),e("code",[v._v("Promise")]),v._v(" 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。"),e("br"),v._v("\n特点是："),e("br"),v._v("\n对象的状态不受外界影响。"),e("br"),v._v("\n一旦状态改变，就不会再变，任何时候都可以得到这个结果。"),e("br")])]),v._v(" "),e("li",[e("p",[v._v("async 函数\n"),e("code",[v._v("async")]),v._v(" 函数对 "),e("code",[v._v("Generator")]),v._v(" 函数的区别："),e("br"),v._v("\n（1）内置执行器。"),e("br"),v._v(" "),e("code",[v._v("Generator")]),v._v(" 函数的执行必须靠执行器，而 "),e("code",[v._v("async")]),v._v(" 函数自带执行器。也就是说，"),e("code",[v._v("async")]),v._v(" 函数的执行，与普通函数一模一样，只要一行。"),e("br"),v._v("\n（2）更好的语义。"),e("br"),v._v(" "),e("code",[v._v("async")]),v._v(" 和 "),e("code",[v._v("await")]),v._v("，比起星号和 "),e("code",[v._v("yield")]),v._v("，语义更清楚了。"),e("code",[v._v("async")]),v._v(" 表示函数里有异步操作，"),e("code",[v._v("await")]),v._v("表示紧跟在后面的表达式需要等待结果。"),e("br"),v._v("\n（3）正常情况下，"),e("code",[v._v("await")]),v._v("命令后面是一个 "),e("code",[v._v("Promise")]),v._v(" 对象。如果不是，会被转成一个立即"),e("code",[v._v("resolve")]),v._v(" 的 "),e("code",[v._v("Promise")]),v._v(" 对象。"),e("br"),v._v("\n（4）返回值是 "),e("code",[v._v("Promise")]),v._v("。"),e("br"),v._v(" "),e("code",[v._v("async")]),v._v(" 函数的返回值是 "),e("code",[v._v("Promise")]),v._v(" 对象，这比 "),e("code",[v._v("Generator")]),v._v(" 函数的返回值是 "),e("code",[v._v("Iterator")]),v._v(" 对象方便多了。你可以用 "),e("code",[v._v("then")]),v._v(" 方法指定下一步的操作。"),e("br")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("Class")]),v._v(" "),e("code",[v._v("class")]),v._v(" 跟"),e("code",[v._v("let")]),v._v("、"),e("code",[v._v("const")]),v._v("一样：不存在变量提升、不能重复声明..."),e("br"),v._v(" "),e("code",[v._v("ES6")]),v._v(" 的"),e("code",[v._v("class")]),v._v("可以看作只是一个语法糖，它的绝大部分功能"),e("br"),v._v(" "),e("code",[v._v("ES5")]),v._v(" 都可以做到，新的"),e("code",[v._v("class")]),v._v("写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。"),e("br")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("Module")]),v._v(" "),e("code",[v._v("ES6")]),v._v(" 的模块自动采用严格模式，不管你有没有在模块头部加上"),e("code",[v._v('"use strict"')]),v._v(";"),e("br"),v._v(" "),e("code",[v._v("import")]),v._v("和"),e("code",[v._v("export")]),v._v("命令以及"),e("code",[v._v("export")]),v._v("和"),e("code",[v._v("export default")]),v._v("的区别"),e("br")])])]),v._v(" "),e("h2",{attrs:{id:"css3-新特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css3-新特性"}},[v._v("#")]),v._v(" Css3 新特性")]),v._v(" "),e("ol",[e("li",[v._v("过渡 transition"),e("br")]),v._v(" "),e("li",[v._v("动画 animation"),e("br")]),v._v(" "),e("li",[v._v("形状转换 transform"),e("br")]),v._v(" "),e("li",[v._v("阴影 box-shadow"),e("br")]),v._v(" "),e("li",[v._v("滤镜 Filter"),e("br")]),v._v(" "),e("li",[v._v("颜色 rgba"),e("br")]),v._v(" "),e("li",[v._v("栅格布局 gird"),e("br")]),v._v(" "),e("li",[v._v("弹性布局 flex"),e("br"),v._v("\n等等还多...")])]),v._v(" "),e("h2",{attrs:{id:"说一说什么是跨域-怎么解决"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说一说什么是跨域-怎么解决"}},[v._v("#")]),v._v(" 说一说什么是跨域，怎么解决")]),v._v(" "),e("p",[v._v("因为浏览器出于安全考虑，有同源策略。也就是说，如果协议、域名或者端口有一个不同就是跨域，Ajax 请求会失败。\n为来防止 CSRF 攻击"),e("br")]),v._v(" "),e("ol",[e("li",[e("code",[v._v("JSONP")]),e("br"),v._v(" "),e("code",[v._v("JSONP")]),v._v(" 的原理很简单，就是利用 "),e("code",[v._v("<script>")]),v._v(" 标签没有跨域限制的漏洞。"),e("br"),v._v("\n通过 "),e("code",[v._v("<script>")]),v._v(" 标签指向一个需要访问的地址并提供一个回调函数来接收数据当需要通讯时。"),e("br"),v._v(" "),e("code",[v._v('<script src="http://domain/api?param1=a&param2=b&callback=jsonp"><\/script>')]),e("br"),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),v._v("script")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),e("span",{pre:!0,attrs:{class:"token script"}},[e("span",{pre:!0,attrs:{class:"token language-javascript"}},[v._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("jsonp")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("data")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("</")]),v._v("script")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("\n```\n")])])])])]),v._v(" "),e("p",[e("code",[v._v("JSONP")]),v._v(" 使用简单且兼容性不错，但是只限于 get 请求。"),e("br")]),v._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("p",[e("code",[v._v("CORS")]),v._v(" "),e("code",[v._v("CORS")]),v._v(" 需要浏览器和后端同时支持。IE 8 和 9 需要通过 "),e("code",[v._v("XDomainRequest")]),v._v(" 来实现。"),e("br")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("document.domain")]),v._v("\n该方式只能用于二级域名相同的情况下，比如 "),e("code",[v._v("a.test.com")]),v._v(" 和 "),e("code",[v._v("b.test.com")]),v._v(" 适用于该方式。"),e("br"),v._v("\n只需要给页面添加 "),e("code",[v._v("document.domain = 'test.com'")]),v._v(" 表示二级域名都相同就可以实现跨域"),e("br")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("webpack")]),v._v(" 配置 "),e("code",[v._v("proxyTable")]),v._v(" 设置开发环境跨域"),e("br")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("nginx")]),v._v(" 代理跨域"),e("br")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("iframe")]),v._v(" 跨域"),e("br")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("postMessage")]),e("br"),v._v("\n这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息")])])]),v._v(" "),e("h2",{attrs:{id:"说一说前端性能优化方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说一说前端性能优化方案"}},[v._v("#")]),v._v(" 说一说前端性能优化方案")]),v._v(" "),e("p",[v._v("三个方面来说明前端性能优化"),e("br")]),v._v(" "),e("ol",[e("li",[e("code",[v._v("webapck")]),v._v("优化与开启"),e("code",[v._v("gzip")]),v._v("压缩\n"),e("ul",[e("li",[e("code",[v._v("babel-loader")]),v._v("用 "),e("code",[v._v("include")]),v._v(" 或 "),e("code",[v._v("exclude")]),v._v(" 来帮我们避免不必要的转译，不转译"),e("code",[v._v("node_moudules")]),v._v("中的"),e("code",[v._v("js")]),v._v("文件，其次在缓存当前转译的"),e("code",[v._v("js")]),v._v("文件，设置"),e("code",[v._v("loader: 'babel-loader?cacheDirectory=true'")])]),v._v(" "),e("li",[v._v("文件采用按需加载等等")]),v._v(" "),e("li",[v._v("具体的做法非常简单，只需要你在你的 "),e("code",[v._v("request headers")]),v._v(" 中加上这么一句：\n"),e("code",[v._v("accept-encoding:gzip")])]),v._v(" "),e("li",[v._v("图片优化，采用"),e("code",[v._v("svg")]),v._v("图片或者字体图标")]),v._v(" "),e("li",[v._v("浏览器缓存机制，它又分为强缓存和协商缓存")])])]),v._v(" "),e("li",[v._v("本地存储——从 "),e("code",[v._v("Cookie")]),v._v(" 到 "),e("code",[v._v("Web Storage、IndexedDB")]),v._v(" "),e("ul",[e("li",[v._v("说明一下"),e("code",[v._v("SessionStorage")]),v._v("和"),e("code",[v._v("localStorage")]),v._v("还有"),e("code",[v._v("cookie")]),v._v("的区别和优缺点")])])]),v._v(" "),e("li",[v._v("代码优化\n"),e("ul",[e("li",[v._v("事件代理")]),v._v(" "),e("li",[v._v("事件的节流和防抖")]),v._v(" "),e("li",[v._v("页面的回流和重绘")]),v._v(" "),e("li",[e("code",[v._v("EventLoop")]),v._v("事件循环机制")]),v._v(" "),e("li",[v._v("代码优化等等")])])])]),v._v(" "),e("h2",{attrs:{id:"说一说-sessionstorage-和-localstorage-还有-cookie"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说一说-sessionstorage-和-localstorage-还有-cookie"}},[v._v("#")]),v._v(" 说一说 SessionStorage 和 localStorage 还有 cookie")]),v._v(" "),e("p",[v._v("共同点：都是保存在浏览器端、且同源的"),e("br"),v._v("\n不同点："),e("br")]),v._v(" "),e("ol",[e("li",[e("p",[e("code",[v._v("cookie")]),v._v("数据始终在同源的"),e("code",[v._v("http")]),v._v("请求中携带（即使不需要），即"),e("code",[v._v("cookie")]),v._v("在浏览器和服务器间来回传递。"),e("code",[v._v("cookie")]),v._v("数据还有路径"),e("code",[v._v("（path）")]),v._v("的概念，可以限制"),e("code",[v._v("cookie")]),v._v("只属于某个路径下。"),e("code",[v._v("sessionStorage")]),v._v("和"),e("code",[v._v("localStorage")]),v._v("不会自动把数据发送给服务器，仅在本地保存。")])]),v._v(" "),e("li",[e("p",[v._v("存储大小限制也不同，"),e("code",[v._v("cookie")]),v._v("数据不能超过"),e("code",[v._v("4K")]),v._v("，"),e("code",[v._v("sessionStorage")]),v._v("和"),e("code",[v._v("localStorage")]),v._v("可以达到"),e("code",[v._v("5M")])])]),v._v(" "),e("li",[e("br"),v._v(" "),e("ul",[e("li",[e("code",[v._v("sessionStorage")]),v._v("：仅在当前浏览器窗口关闭之前有效；")]),v._v(" "),e("li",[e("code",[v._v("localStorage")]),v._v("：始终有效，窗口或浏览器关闭也一直保存，本地存储，因此用作持久数据；")]),v._v(" "),e("li",[e("code",[v._v("cookie")]),v._v("：只在设置的"),e("code",[v._v("cookie")]),v._v("过期时间之前有效，即使窗口关闭或浏览器关闭")])])]),v._v(" "),e("li",[e("p",[v._v("作用域不同"),e("br")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("sessionStorage")]),v._v("：不在不同的浏览器窗口中共享，即使是同一个页面；")]),v._v(" "),e("li",[e("code",[v._v("localstorage")]),v._v("：在所有同源窗口中都是共享的；也就是说只要浏览器不关闭，数据仍然存在")]),v._v(" "),e("li",[e("code",[v._v("cookie")]),v._v(": 也是在所有同源窗口中都是共享的.也就是说只要浏览器不关闭，数据仍然存在")])])])]),v._v(" "),e("h2",{attrs:{id:"说一说你用过的-css-布局"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说一说你用过的-css-布局"}},[v._v("#")]),v._v(" 说一说你用过的 css 布局")]),v._v(" "),e("p",[v._v("gird 布局，layout 布局，flex 布局，双飞翼，圣杯布局等")]),v._v(" "),e("h2",{attrs:{id:"promise-是什么-解决了什么-之前怎么实现的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-是什么-解决了什么-之前怎么实现的"}},[v._v("#")]),v._v(" Promise 是什么，解决了什么，之前怎么实现的")]),v._v(" "),e("p",[v._v("Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。\n解决来之前在请求中回调请求产生的回调地狱，使得现在的代码更加合理更加优雅，也更加容易定位查找问题。")]),v._v(" "),e("h2",{attrs:{id:"说说浏览器缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说说浏览器缓存"}},[v._v("#")]),v._v(" 说说浏览器缓存")]),v._v(" "),e("p",[v._v("缓存可以减少网络 IO 消耗，提高访问速度。浏览器缓存是一种操作简单、效果显著的前端性能优化手段"),e("br"),v._v("\n很多时候，大家倾向于将浏览器缓存简单地理解为“HTTP 缓存”。"),e("br"),v._v("\n但事实上，浏览器缓存机制有四个方面，它们按照获取资源时请求的优先级依次排列如下："),e("br")]),v._v(" "),e("p",[e("code",[v._v("Memory Cache")]),e("br"),v._v(" "),e("code",[v._v("Service Worker Cache")]),e("br"),v._v(" "),e("code",[v._v("HTTP Cache")]),e("br"),v._v(" "),e("code",[v._v("Push Cach")]),e("br")]),v._v(" "),e("p",[v._v("缓存它又分为强缓存和协商缓存。优先级较高的是强缓存，在命中强缓存失败的情况下，才会走协商缓存"),e("br"),v._v("\n实现强缓存，过去我们一直用 "),e("code",[v._v("expires")]),v._v("。"),e("br"),v._v("\n当服务器返回响应时，在 "),e("code",[v._v("Response Headers")]),v._v(" 中将过期时间写入 "),e("code",[v._v("expires")]),v._v(" 字段，现在一般使用 "),e("code",[v._v("Cache-Control")]),v._v(" 两者同时出现使用 "),e("code",[v._v("Cache-Control")]),e("br")]),v._v(" "),e("p",[v._v("协商缓存，"),e("code",[v._v("Last-Modified")]),v._v(" 是一个时间戳，如果我们启用了协商缓存，它会在首次请求时随着 "),e("code",[v._v("Response Headers")]),v._v(" 返回：每次请求去判断这个时间戳是否发生变化。从而去决定你是"),e("code",[v._v("304")]),v._v("读取缓存还是给你返回最新的数据")])])}),[],!1,null,null,null);_.default=o.exports}}]);
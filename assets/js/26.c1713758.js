(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{390:function(t,s,a){"use strict";a.r(s);var n=a(49),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"js-基本数据类型有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-基本数据类型有哪些"}},[t._v("#")]),t._v(" js 基本数据类型有哪些")]),t._v(" "),a("ul",[a("li",[t._v("字符串 String")]),t._v(" "),a("li",[t._v("数值 Number")]),t._v(" "),a("li",[t._v("布尔 boolean")]),t._v(" "),a("li",[t._v("对象 Object")]),t._v(" "),a("li",[t._v("数组 Array")]),t._v(" "),a("li",[t._v("null")]),t._v(" "),a("li",[t._v("undefined")])]),t._v(" "),a("h2",{attrs:{id:"ajax-如何使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ajax-如何使用"}},[t._v("#")]),t._v(" Ajax 如何使用")]),t._v(" "),a("ol",[a("li",[t._v("创建 XMLHTTPRequest 对象")]),t._v(" "),a("li",[t._v("使用 open 方法创建 http 请求，并设置请求地址")]),t._v(" "),a("li",[t._v("xhr.open(get/post，url，async：true(异步)/false(同步))经常 使用前三个参数")]),t._v(" "),a("li",[t._v("设置发送的数据，用 send 发送请求")]),t._v(" "),a("li",[t._v("注册事件（给 ajax 设置事件）")]),t._v(" "),a("li",[t._v("获取响应并更新页面")])]),t._v(" "),a("h2",{attrs:{id:"如何判断一个数据是-nan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何判断一个数据是-nan"}},[t._v("#")]),t._v(" 如何判断一个数据是 NaN")]),t._v(" "),a("blockquote",[a("p",[t._v("NaN 非数字 但是用 typeof 检测是 number 类型")])]),t._v(" "),a("ol",[a("li",[t._v("利用 NaN 的定义 用 typeof 判断是否为 number 类型并且判断是否满足 isNan")]),t._v(" "),a("li",[t._v("利用 NaN 是唯一一个不等于任何自身的特点 n !== n")]),t._v(" "),a("li",[t._v("利用 ES6 中提供的 Object.is()方法（判断两个值是否相等）")])]),t._v(" "),a("h2",{attrs:{id:"js-中-null-与-undefined-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-中-null-与-undefined-区别"}},[t._v("#")]),t._v(" Js 中 null 与 undefined 区别")]),t._v(" "),a("p",[t._v("相同点：用 if 判断时，两者都会被转换成 false\n不同点：number 转换的值不同 number（null）为 0 number（undefined） 为 NaN Null 表示一个值被定义了，但是这个值是空值 Undefined 变量声明但未赋值")]),t._v(" "),a("h2",{attrs:{id:"闭包是什么-有什么特性-对页面会有什么影响"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包是什么-有什么特性-对页面会有什么影响"}},[t._v("#")]),t._v(" 闭包是什么？有什么特性？对页面会有什么影响")]),t._v(" "),a("blockquote",[a("p",[t._v("闭包可以简单理解成：定义在一个函数内部的函数。其中一个内部函数 在包含它们的外部函数之外被调用时，就会形成闭包。\n一句话可以概括：闭包就是能够读取其他函数内部变量的函数，或者子函数在外调用，子函数所在的父函数的作用域不会被释放。")])]),t._v(" "),a("p",[a("strong",[t._v("特点：")])]),t._v(" "),a("ol",[a("li",[t._v("函数嵌套函数。")]),t._v(" "),a("li",[t._v("函数内部可以引用外部的参数和变量。")]),t._v(" "),a("li",[t._v("参数和变量不会被垃圾回收机制回收。")])]),t._v(" "),a("p",[a("strong",[t._v("使用：")])]),t._v(" "),a("ol",[a("li",[t._v("读取函数内部的变量。")]),t._v(" "),a("li",[t._v("这些变量的值始终保持在内存中，不会在外层函数调用后被自动清除。")])]),t._v(" "),a("p",[a("strong",[t._v("优点：")])]),t._v(" "),a("ol",[a("li",[t._v("变量长期驻扎在内存中")]),t._v(" "),a("li",[t._v("避免全局变量的污染")]),t._v(" "),a("li",[t._v("私有成员的存在")])]),t._v(" "),a("p",[a("strong",[t._v("缺点：会造成内存泄露")])]),t._v(" "),a("h2",{attrs:{id:"js-中常见的内存泄漏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-中常见的内存泄漏"}},[t._v("#")]),t._v(" Js 中常见的内存泄漏")]),t._v(" "),a("ol",[a("li",[t._v("意外的全局变量")]),t._v(" "),a("li",[t._v("被遗忘的计时器或回调函数")]),t._v(" "),a("li",[t._v("脱离 DOM 的引用")]),t._v(" "),a("li",[t._v("闭包")])]),t._v(" "),a("h2",{attrs:{id:"事件委托是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件委托是什么"}},[t._v("#")]),t._v(" 事件委托是什么")]),t._v(" "),a("blockquote",[a("p",[t._v("事件委托指的是，不在事件的发生地（直接 dom）上设置监 听函数，而是在其父元素上设置监听函数，通过事件冒泡，父元素可 以监听到子元素上事件的触发，通过判断事件发生元素 DOM 的类 型，来做出不同的响应。")])]),t._v(" "),a("p",[t._v("JS 高程上讲：事件委托就是利用事件冒泡，只制定一个时间处理程序， 就可以管理某一类型的所有事件。")]),t._v(" "),a("p",[t._v("事件委托，称事件代理，是 js 中很常用的绑定事件的技巧，事件委托就 是把原本需要绑定在子元素的响应事件委托给父元素，让父元素担当事 件监听的职务，事件委托的原理是 DOM 元素的事件冒泡")]),t._v(" "),a("p",[t._v("好处：比较合适动态元素的绑定，新添加的子元素也会有监听函数，也可以有事件触发机制。")]),t._v(" "),a("h2",{attrs:{id:"什么是事件冒泡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是事件冒泡"}},[t._v("#")]),t._v(" 什么是事件冒泡")]),t._v(" "),a("p",[t._v("一个事件触发后，会在子元素和父元素之间传播，这种传播分为三个阶段")]),t._v(" "),a("ol",[a("li",[t._v("捕获阶段（从 window 对象传导到目标节点（从外到里），这个阶段不会 响应任何事件）")]),t._v(" "),a("li",[t._v("目标阶段（在目标节点上触发）")]),t._v(" "),a("li",[t._v("冒泡阶段（从目标节 点传导回 window 对象（从里到外））")])]),t._v(" "),a("p",[a("strong",[t._v("事件委托/事件代理就是利用事件冒泡的机制把里层需要响应的事件绑定到外层")])]),t._v(" "),a("h2",{attrs:{id:"本地存储与-cookie-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地存储与-cookie-的区别"}},[t._v("#")]),t._v(" 本地存储与 cookie 的区别")]),t._v(" "),a("p",[a("strong",[t._v("Cookie")])]),t._v(" "),a("p",[t._v("Cookie 是小甜饼的意思。顾名思义，cookie 确实非常小，它的大小限 制为 4KB 左右。它的主要用途有保存登录信息，比如你登录某个网站市 场可以看到“记住密码”，这通常就是通过在 Cookie 中存入一段辨别用 户身份的数据来实现的")]),t._v(" "),a("p",[a("strong",[t._v("localStorage")])]),t._v(" "),a("p",[t._v("localStorage 是 HTML5 标准中新加入的技术，它并不是什么划时代的 新东西。早在 IE 6 时代，就有一个叫 userData 的东西用于本地存储， 而当时考虑到浏览器兼容性，更通用的方案是使用 Flash。而如今， localStorage 被大多数浏览器所支持，如果你的网站需要支持 IE6+， 那以 userData 作为你方案是种不错的选择。")]),t._v(" "),a("p",[a("strong",[t._v("sessionStorage")])]),t._v(" "),a("p",[t._v("sessionStorage 与 localStorage 的接口类似，但保存数据的生命周期 与 localStorage 不同。做过后端开发的同学应该知道 Session 这个词 的意思，直译过来是“会话”。而 sessionStorage 是一个前端的概念， 它只是可以将一部分数据在当前会话中保存下来，刷新页面数据依旧存 在。但当页面关闭后，sessionStorage 中的数据就会被清空。")]),t._v(" "),a("p",[a("strong",[t._v("三者的异同")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("特性")]),t._v(" "),a("th",[t._v("数据的生命期")]),t._v(" "),a("th",[t._v("存放数据大小")]),t._v(" "),a("th",[t._v("与服务器端通信")]),t._v(" "),a("th",[t._v("易用性")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Cookie")]),t._v(" "),a("td",[t._v("一般由服务器生成，可设置失效时间。如果在浏览器端生成 Cookie，默 认是关闭浏览器后失效")]),t._v(" "),a("td",[t._v("4K 左右")]),t._v(" "),a("td",[t._v("每次都会携带在 HTTP 头中，如果使用 cookie 保存过多数据会带来性能 问题")]),t._v(" "),a("td",[t._v("需要程序员自己封装，源生的 Cookie 接口不友好")])]),t._v(" "),a("tr",[a("td",[t._v("localStorage")]),t._v(" "),a("td",[t._v("除非被清除，否则永久保存")]),t._v(" "),a("td",[t._v("一般为 5MB")]),t._v(" "),a("td",[t._v("仅在客户端（即浏览器）中保存，不参与和服务器的通信")]),t._v(" "),a("td",[t._v("源生接口可以接受，亦可再次封装来对 Object 和 Array 有更好的支持")])]),t._v(" "),a("tr",[a("td",[t._v("sessionStorage")]),t._v(" "),a("td",[t._v("仅在当前会话下有效，关闭页面或浏览器后被清除")]),t._v(" "),a("td",[t._v("一般为 5MB")]),t._v(" "),a("td",[t._v("仅在客户端（即浏览器）中保存，不参与和服务器的通信")]),t._v(" "),a("td",[t._v("源生接口可以接受，亦可再次封装来对 Object 和 Array 有更好的支持")])])])]),t._v(" "),a("h2",{attrs:{id:"es6-新特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-新特性"}},[t._v("#")]),t._v(" ES6 新特性")]),t._v(" "),a("p",[t._v("const 和 let、模板字符串、箭头函数、函数的参数默认值、对象和数组 解构、for...of 和 for...in、ES6 中的类")]),t._v(" "),a("h2",{attrs:{id:"let-与-var-与-const-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let-与-var-与-const-的区别"}},[t._v("#")]),t._v(" let 与 var 与 const 的区别")]),t._v(" "),a("ul",[a("li",[t._v("var 声明的变量会挂载在 window 上，而 let 和 const 声明的变量不会")]),t._v(" "),a("li",[t._v("var 声明的变量存在变量提升，let 和 const 不存在变量提升")]),t._v(" "),a("li",[t._v("同一作用域下 var 可以声明同名变量，let 和 const、不可以")]),t._v(" "),a("li",[t._v("let 和 const 声明会形成块级作用域")]),t._v(" "),a("li",[t._v("let 暂存死区")]),t._v(" "),a("li",[t._v("const 一旦声明必须赋值，不能用 null 占位，声明后不能再修改，如果 声明的是复合类型数据，可以修改属性")])]),t._v(" "),a("h2",{attrs:{id:"数组方法有哪些请简述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组方法有哪些请简述"}},[t._v("#")]),t._v(" 数组方法有哪些请简述")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("arr.push()")]),t._v(" 从后面添加元素，返回值为添加完后的数组的长度")]),t._v(" "),a("li",[a("code",[t._v("arr.pop()")]),t._v(" 从后面删除元素，只能是一个，返回值是删除的元素")]),t._v(" "),a("li",[a("code",[t._v("arr.shift()")]),t._v(" 从前面删除元素，只能删除一个 返回值是删除的元素")]),t._v(" "),a("li",[a("code",[t._v("arr.unshift()")]),t._v(" 从前面添加元素, 返回值是添加完后的数组的长度")]),t._v(" "),a("li",[a("code",[t._v("arr.splice(i,n)")]),t._v(" 删除从 i(索引值)开始之后的那个元素。返回值是删除的元素")]),t._v(" "),a("li",[a("code",[t._v("arr.concat()")]),t._v(" 连接两个数组 返回值为连接后的新数组")]),t._v(" "),a("li",[a("code",[t._v("str.split()")]),t._v(" 将字符串转化为数组")]),t._v(" "),a("li",[a("code",[t._v("arr.sort()")]),t._v(" 将数组进行排序,返回值是排好的数组，默认是按照最左边的数 字进行排序，不是按照数字大小排序的")]),t._v(" "),a("li",[a("code",[t._v("arr.reverse()")]),t._v(" 将数组反转,返回值是反转后的数组")]),t._v(" "),a("li",[a("code",[t._v("arr.slice(start,end)")]),t._v(" 切去索引值 start 到索引值 end 的数组，不包含 end 索引的值，返回值是切出来的数组")]),t._v(" "),a("li",[a("code",[t._v("arr.forEach(callback)")]),t._v(" 遍历数组,无 return 即使有 return，也不会返回 任何值，并且会影响原来的数组")]),t._v(" "),a("li",[a("code",[t._v("arr.map(callback)")]),t._v(" 映射数组(遍历数组),有 return 返回一个新数组")]),t._v(" "),a("li",[a("code",[t._v("arr.filter(callback)")]),t._v(" 过滤数组，返回一个满足要求的数组")])]),t._v(" "),a("h2",{attrs:{id:"什么是面向对象请简述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是面向对象请简述"}},[t._v("#")]),t._v(" 什么是面向对象请简述")]),t._v(" "),a("p",[t._v("面向对象是一种思想，是基于面向过程而言的，就是说面向对象是将功 能等通过对象来实现，将功能封装进对象之中，让对象去实现具体的细 节；这种思想是将数据作为第一位，这是对数据一种优化，操作起来更 加的方便，简化了过程。")]),t._v(" "),a("p",[t._v("Js 本身是没有 class 类型的，但是每个函数都有一个 prototype 属性， prototype 指向一个对象，当函数作为构造函数时，prototype 就起到 类似于 class 的作用。")]),t._v(" "),a("p",[t._v("面向对象有三个特点：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("封装")]),t._v(" 隐藏对象的属性和实现细节，对外提供公 共访问方式")]),t._v(" "),a("li",[a("strong",[t._v("继承")]),t._v(" 提高代码复用性，继承是多态的前提")]),t._v(" "),a("li",[a("strong",[t._v("多态")]),t._v(" 是父类或接口定义的引用变量可以指向子类或具体实现类的实例对象")])]),t._v(" "),a("h2",{attrs:{id:"普通函数和构造函数的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#普通函数和构造函数的区别"}},[t._v("#")]),t._v(" 普通函数和构造函数的区别")]),t._v(" "),a("ol",[a("li",[t._v("构造函数也是一个普通函数，创建方式和普通函数一样，但是构造函数习惯上首字母大写")]),t._v(" "),a("li",[t._v("调用方式不一样，普通函数直接调用，构造函数要用关键字 new 来调用")]),t._v(" "),a("li",[t._v("调用时，构造函数内部会创建一个新对象，就是实例，普通函数不会创 建新对象")]),t._v(" "),a("li",[t._v("构造函数内部的 this 指向实例，普通函数内部的 this 指向调用函数的 对象（如果没有对象调用，默认为 window）")]),t._v(" "),a("li",[t._v("构造函数默认的返回值是创建的对象（也就是实例），普通函数的返回 值由 return 语句决定")]),t._v(" "),a("li",[t._v("构造函数的函数名与类名相同")])]),t._v(" "),a("h2",{attrs:{id:"请简述原型-原型链-原型-继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简述原型-原型链-原型-继承"}},[t._v("#")]),t._v(" 请简述原型/原型链/（原型）继承")]),t._v(" "),a("p",[a("strong",[t._v("什么是原型：")])]),t._v(" "),a("p",[t._v("任何对象实例都有一个原型，也叫原型对象，这个原型对象由对象的 内置属性_proto_指向它的构造函数的 prototype 指向的对象，即任何对 象都是由一个构造函数创建的，但是不是每一个对象都有 prototype， 只有方法才有 prototype。")]),t._v(" "),a("p",[a("strong",[t._v("什么是原型链")])]),t._v(" "),a("p",[t._v("原型链基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。我们知道，每个构造函数都有一个原型对象，每个原型对象都 有一个指向构造函数的指针，而实例又包涵一个指向原型对象的内部指针。"),a("br"),t._v("\n原型链的核心就是依赖对象的 "),a("em",[t._v("proto")]),t._v(" 的指向，当自身不存在的属性 时，就一层层的扒出创建对象的构造函数，直至到 Object 时，就没有 "),a("em",[t._v("proto")]),t._v(" 指向了。"),a("br"),t._v("\n因为 "),a("em",[t._v("proto")]),t._v(" 实质找的是 prototype，所以我们只要找这个链条上的构造 函数的 prototype。其中 Object.prototype 是没有 "),a("em",[t._v("proto")]),t._v(" 属性的，它 == null。"),a("br"),t._v("\n每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的 指针，而实例都包含指向原型对象内部的指针。我们让原型对象（1）等 于另一个原型对象的实例（2）, 此时原型对象（2）将包含一个指向原型对象（1）的指针， 再让原型对象（2）的实例等于原型对象（3），如此层层递进就构成了实 例和原型的链条，这就是原型链的概念"),a("br")]),t._v(" "),a("p",[t._v("每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数想 指针(constructor)，而实例对象都包含一个指向原型对象的内部指针 ("),a("strong",[t._v("proto")]),t._v(")。如果让原型对象等于另一个原型对象的实例，此时的原型 对象将包含一个指向另一个原型的指针("),a("strong",[t._v("proto")]),t._v(")，另一个原型也包含 着一个指向另一个构造函数的指针(constructor)。假如另一个原型又是 另一个类型的实例……这就构成了实例与原型的链条。也叫原型链 原型继承是 js 的一种继承方式，原型链作为实现继承的主要方法,其基本 思路是利用原型让一个引用类型继承另一个引用类型的属性和方法, 原型继承：利用原型中的成员可以被和其相关的对象共享这一特性，可 以实现继承，这种实现继承的方式，就叫做原型继承。")]),t._v(" "),a("h2",{attrs:{id:"promise-的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-的理解"}},[t._v("#")]),t._v(" Promise 的理解")]),t._v(" "),a("p",[a("strong",[t._v("什么是 Promise")])]),t._v(" "),a("p",[t._v("我们都知道，Promise 是承诺的意思，承诺它过一段时间会给你一个结果。"),a("br"),t._v("\nPromise 是一种解决异步编程的方案，相比回调函数和事件更合理和更 强大。"),a("br"),t._v("\n从语法上讲，promise 是一个对象，从它可以获取异步操作的消息。")]),t._v(" "),a("p",[a("strong",[t._v("Promise 有三种状态")])]),t._v(" "),a("ol",[a("li",[t._v("pending 初始状态也叫等待状态")]),t._v(" "),a("li",[t._v("fulfiled 成功状态")]),t._v(" "),a("li",[t._v("rejected 失败状态；状态一旦改变，就不会再变。")])]),t._v(" "),a("p",[t._v("创造 promise 实例后，它会立即执行。")]),t._v(" "),a("p",[a("strong",[t._v("Promise 的两个特点")])]),t._v(" "),a("ol",[a("li",[t._v("Promise 对象的状态不受外界影响")]),t._v(" "),a("li",[t._v("Promise 的状态一旦改变，就不会再变，任何时候都可以得到这个结 果，状态不可以逆")])]),t._v(" "),a("p",[a("strong",[t._v("Promise 的三个缺点")])]),t._v(" "),a("ol",[a("li",[t._v("无法取消 Promise,一旦新建它就会立即执行，无法中途取消")]),t._v(" "),a("li",[t._v("如果不设置回调函数，Promise 内部抛出的错误，不会反映到外部")]),t._v(" "),a("li",[t._v("当处于 pending（等待）状态时，无法得知目前进展到哪一个阶段，是刚刚开始还是即将完成")])]),t._v(" "),a("h2",{attrs:{id:"我们用-promise-来解决什么问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我们用-promise-来解决什么问题"}},[t._v("#")]),t._v(" 我们用 Promise 来解决什么问题")]),t._v(" "),a("blockquote",[a("p",[t._v("promise 是用来解决两个问题的")])]),t._v(" "),a("ol",[a("li",[t._v("回调地狱，代码难以维护， 常常第一个的函数的输出是第二个函数的 输入这种现象")]),t._v(" "),a("li",[t._v("promise 可以支持多并发的请求，获取并发请求中的数据这个 promise 可以解决异步的问题，本身不能说 promise 是异步的")])]),t._v(" "),a("h2",{attrs:{id:"请简述-async-的用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简述-async-的用法"}},[t._v("#")]),t._v(" 请简述 async 的用法")]),t._v(" "),a("p",[t._v("Async 就是 generation 和 promise 的语法糖，async 就是将 generator 的*换成 async，将 yiled 换成 await")]),t._v(" "),a("p",[t._v("函数前必须加一个 async，异步操作方法前加一个 await 关键字，意思就 是等一下，执行完了再继续走，注意：await 只能在 async 函数中运行， 否则会报错")]),t._v(" "),a("p",[t._v("Promise 如果返回的是一个错误的结果，如果没有做异常处理，就会报 错，所以用 try..catch 捕获一下异常就可以了")]),t._v(" "),a("h2",{attrs:{id:"说说前端中的事件流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说说前端中的事件流"}},[t._v("#")]),t._v(" 说说前端中的事件流")]),t._v(" "),a("p",[t._v("HTML 中与 javascript 交互是通过事件驱动来实现的，例如鼠标点 击事件 onclick、页面的滚动事件 onscroll 等等，可以向文档或者 文档中的元素添加事件侦听器来预订事件。想要知道这些事件是在什 么时候进行调用的，就需要了解一下“事件流”的概念。")]),t._v(" "),a("p",[a("strong",[t._v("什么是事件流")]),t._v("：事件流描述的是从页面中接收事件的顺序,DOM2 级 事件流包括下面几个阶段。")]),t._v(" "),a("ul",[a("li",[t._v("事件捕获阶段")]),t._v(" "),a("li",[t._v("处于目标阶段")]),t._v(" "),a("li",[t._v("事件冒泡阶段")])]),t._v(" "),a("p",[t._v("addEventListener：addEventListener 是 DOM2 级事件新增的指 定事件处理程序的操作，这个方法接收 3 个参数：要处理的事件名、 作为事件处理程序的函数和一个布尔值。最后这个布尔值参数如果是 true，表示在捕获阶段调用事件处理程序；如果是 false，表示 在冒 泡阶段调用事件处理程序。"),a("br"),t._v("\nIE 只支持事件冒泡")]),t._v(" "),a("h2",{attrs:{id:"js-的-new-操作符做了哪些事情"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-的-new-操作符做了哪些事情"}},[t._v("#")]),t._v(" JS 的 new 操作符做了哪些事情")]),t._v(" "),a("p",[t._v("new 操作符新建了一个空对象，这个对象原型指向构造函数的 prototype，执行构造函数后返回这个对象。")]),t._v(" "),a("h2",{attrs:{id:"改变函数内部-this-指针的指向函数-bind-apply-call-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#改变函数内部-this-指针的指向函数-bind-apply-call-的区别"}},[t._v("#")]),t._v(" 改变函数内部 this 指针的指向函数（bind，apply，call 的区别）")]),t._v(" "),a("ul",[a("li",[t._v("通过 apply 和 call 改变函数的 this 指向，他们两个函数的第一个参数都是一样的表示要改变指向的那个对象，第二个参数，apply 是 数组，而 call 则是 arg1,arg2...这种形式。")]),t._v(" "),a("li",[t._v("通过 bind 改变 this 作 用域会返回一个新的函数，这个函数不会马上执行。")])]),t._v(" "),a("h2",{attrs:{id:"js-的各种位置-比-clientheight-scrollheight-offsetheight-以及-scrolltop-offsettop-clienttop-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-的各种位置-比-clientheight-scrollheight-offsetheight-以及-scrolltop-offsettop-clienttop-的区别"}},[t._v("#")]),t._v(" JS 的各种位置，比 clientHeight,scrollHeight,offsetHeight ,以及 scrollTop, offsetTop,clientTop 的区别")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("clientHeight")]),t._v("：表示的是可视区域的高度，不包含 border 和滚动条")]),t._v(" "),a("li",[a("code",[t._v("offsetHeight")]),t._v("：表示可视区域的高度，包含了 border 和滚动条")]),t._v(" "),a("li",[a("code",[t._v("scrollHeight")]),t._v("：表示了所有区域的高度，包含了因为滚动被隐藏的部分。")]),t._v(" "),a("li",[a("code",[t._v("clientTop")]),t._v("：表示边框 border 的厚度，在未指定的情况下一般为 0")]),t._v(" "),a("li",[a("code",[t._v("scrollTop")]),t._v("：滚动后被隐藏的高度，获取对象相对于由 offsetParent 属 性指定的父坐标(css 定位的元素或 body 元素)距离顶端的高度。")])]),t._v(" "),a("h2",{attrs:{id:"js-拖拽功能的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-拖拽功能的实现"}},[t._v("#")]),t._v(" JS 拖拽功能的实现")]),t._v(" "),a("p",[t._v("首先是三个事件，分别是 "),a("code",[t._v("mousedown")]),t._v("，"),a("code",[t._v("mousemove")]),t._v("，"),a("code",[t._v("mouseup")]),t._v(" 当鼠 标点击按下的时候，需要一个 tag 标识此时已经按下，可以执行 mousemove 里面的具体方法。clientX，clientY 标识的是鼠标的坐标， 分别标识横坐标和纵坐标，并且我们用 offsetX 和 offsetY 来表示元素的 元素的初始坐标，移动的举例应该是：鼠标移动时候的坐标-鼠标按下去 时候的坐标。也就是说定位信息为：鼠标移动时候的坐标-鼠标按下去时 候的坐标+元素初始情况下的 offetLeft.还有一点也是原理性的东西，也就 是拖拽的同时是绝对定位，我们改变的是绝对定位条件下的 left 以及 top 等等值。")]),t._v(" "),a("p",[t._v("补充：也可以通过 html5 的拖放（Drag 和 drop）来实现")]),t._v(" "),a("h2",{attrs:{id:"js-中的垃圾回收机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-中的垃圾回收机制"}},[t._v("#")]),t._v(" JS 中的垃圾回收机制")]),t._v(" "),a("p",[t._v("必要性：由于字符串、对象和数组没有固定大小，所有当他们的大小已知 时，才能对他们进行动态的存储分配。JavaScript 程序每次创建字符串、 数组或对象时，解释器都必 须分配内存来存储那个实体。只要像这样动态地分配了内存，最终都要释放这些内存以便他们能够被再用，否则， JavaScript 的解释器将会消耗完系统中所有可用的内存，造成系统崩溃。 这段话解释了为什么需要系统需要垃圾回收，JS 不像 C/C++，他有自己 的一套垃圾回收机制（Garbage Collection）。JavaScript 的解释器可以 检测到何时程序不再使用一个对象了，当他确定了一个对象是无用的时 候，他就知道不再需要这个对象，可以把它所占用的内存释放掉了。例如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b\n")])])]),a("p",[t._v('这时，会释放掉"hello world"，释放内存以便再引用垃圾回收的方法： 标记清除、计数引用。')]),t._v(" "),a("p",[a("strong",[t._v("标记清除")])]),t._v(" "),a("p",[t._v("这是最常见的垃圾回收方式，当变量进入环境时，就标记这个变量为”进 入环境“,从逻辑上讲，永远不能释放进入环境的变量所占的内存，永远不 能释放进入环境变量所占用的内存，只要执行流程进入相应的环境，就可 能用到他们。当离开环境时，就标记为离开环境。")]),t._v(" "),a("p",[t._v("垃圾回收器在运行的时候会给存储在内存中的变量都加上标记（所有都 加），然后去掉环境变量中的变量，以及被环境变量中的变量所引用的变 量（条件性去除标记），删除所有被标记的变量，删除的变量无法在环境 变量中被访问所以会被删除，最后垃圾回收器，完成了内存的清除工作， 并回收他们所占用的内存。")]),t._v(" "),a("p",[a("strong",[t._v("引用计数法")])]),t._v(" "),a("p",[t._v("另一种不太常见的方法就是引用计数法，引用计数法的意思就是每个值没 引用的次数， 当声明了一个变量，并用一个引用类型的值赋值给改变量， 则这个值的引用次数为 1,；相反的，如果包含了对这个值引用的变量又 取得了另外一个值，则原先的引用值引用次数就减 1，当这个值的引用次数为 0 的时候，说明没有办法再访问这个值了，因此就把所占的内存给 回收进来，这样垃圾收集器再次运行的时候，就会释放引用次数为 0 的 这些值。")]),t._v(" "),a("p",[t._v("用引用计数法会存在内存泄露，下面来看原因：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("problem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" objA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" objB "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  objA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("someOtherObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" objB\n  objB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("anotherObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" objA\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在这个例子里面，objA 和 objB 通过各自的属性相互引用，这样的话， 两个对象的引用次数都为 2，在采用引用计数的策略中，由于函数执行之 后，这两个对象都离开了作用域，函数执行完成之后，因为计数不为 0， 这样的相互引用如果大量存在就会导致内存泄露。")]),t._v(" "),a("p",[t._v("特别是在 DOM 对象中，也容易存在这种问题：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" element "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmyObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("element "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" element\nelement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("someObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myObj\n")])])]),a("p",[t._v("这样就不会有垃圾回收的过程。")]),t._v(" "),a("h2",{attrs:{id:"监听对象属性的改变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#监听对象属性的改变"}},[t._v("#")]),t._v(" 监听对象属性的改变")]),t._v(" "),a("p",[t._v("我们假设这里有一个 user 对象, 在 ES5 中可以通过 "),a("code",[t._v("Object.defineProperty")]),t._v(" 来实现已有属性的监听")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v("："),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("strong",[t._v("缺点")]),t._v("：如果 id 不在 user 对象中，则不能监听 id 的变化")]),t._v(" "),a("p",[t._v("在 ES6 中可 以通过 Proxy 来实现")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proxy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("，"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v("："),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" receiver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("这样即使有属性在 user 中不存在，通过 user.id 来定义也同样可以这样 监听这个属性的变化哦。")]),t._v(" "),a("h2",{attrs:{id:"自己实现一个-bind-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自己实现一个-bind-函数"}},[t._v("#")]),t._v(" 自己实现一个 bind 函数")]),t._v(" "),a("p",[t._v("原理：通过 apply 或者 call 方法 来实现。")]),t._v(" "),a("ol",[a("li",[t._v("初始版本")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("bind")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" context "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("newArg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    arg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newArg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("context")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("考虑到原型链")])]),t._v(" "),a("p",[t._v("为什么要考虑？因为在 new 一个 bind 过生成的新函数的时候，必须的条件是要继承原函数的原型")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("bind")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" context "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("bound")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("newArg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    arg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newArg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("context")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("F")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这里需要一个寄生组 合继承")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  bound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" bound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"怎么控制一次加载一张图片-加载完后再加载下一张"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么控制一次加载一张图片-加载完后再加载下一张"}},[t._v("#")]),t._v(" 怎么控制一次加载一张图片，加载完后再加载下一张")]),t._v(" "),a("p",[a("strong",[t._v("方法一")])]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("text/javascript "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}},[a("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://www.phpernote.com/uploadfiles/editor/201107240502201179.jpg"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onload")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'图片的宽度为： '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'；图片的 高度为：'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mypic"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innnerHTML "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<img src=\'"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\' />"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("mypic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("onloadi ng……"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[a("strong",[t._v("方法二")])]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("text/javascript"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}},[a("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://www.phpernote.com/uploadfiles/editor/201107240502201179.jpg"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onreadystatechange")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readyState "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" complete"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'图片的宽度为： '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'；图片的 高度为：'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mypic"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innnerHTML "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<img src=\'"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\' />"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("mypic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("onloadi ng……"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h2",{attrs:{id:"实现-js-中所有对象的深度克隆-包装对象-date-对象-正-则对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现-js-中所有对象的深度克隆-包装对象-date-对象-正-则对象"}},[t._v("#")]),t._v(" 实现 JS 中所有对象的深度克隆（包装对象，Date 对象，正 则对象）")]),t._v(" "),a("p",[t._v("通过递归可以简单实现对象的深度克隆，但是这种方法不管是 ES6 还是 ES5 实现，都有同样的缺陷，就是只能实现特定的 object 的 深度复制（比如数组和函数），不能实现包装对象 Number，String ， Boolean，以及 Date 对象，RegExp 对象的复制。")]),t._v(" "),a("ol",[a("li",[t._v("前文的方法")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deepClone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" newObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    newObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deepClone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" newObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这种方法可以实现一般对象和数组对象的克隆，比如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" newArr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deepClone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// newArr->[1,2, 3]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" newObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deepClone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// newObj={x:1,y:2}")]),t._v("\n")])])]),a("p",[t._v("但是不能实现例如包装对象 Number,String,Boolean,以及正则对 象 RegExp 和 Date 对象的克隆，比如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Number 包装对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "object"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" newNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deepClone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//newNum -> {} 空对象 ")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//String 包装对象 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"object"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" newStr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deepClone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//newStr-> {0:'h',1:'e',2:'l',3:'l',4:'o'};")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Boolean 包装对象 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bol "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" bol "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"object"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" newBol "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deepClone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// newBol ->{} 空对象")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("valueof()函数")])]),t._v(" "),a("p",[t._v("所有对象都有 valueOf 方法，valueOf 方法对于：如果存在任意原 始值，它就默认将对象转换为表示它的原始值。对象是复合值，而且 大多数对象无法真正表示为一个原始值， 因此默认的 valueOf()方法 简单地返回对象本身，而不是返回一个原始值。数组、函数和正则表 达式简单地继承了这个默认方法，调用这些类型的实例的 valueOf() 方法只是简单返回这个对象本身。")]),t._v(" "),a("p",[t._v("对于原始值或者包装类：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("baseClone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("base")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Number ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" newNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("baseClone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//newNum->1 ")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//String")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" newStr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("baseClone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// newStr->"hello" ')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Boolean ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bol "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" newBol "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("baseClone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//newBol-> true")]),t._v("\n")])])]),a("p",[t._v("其实对于包装类，完全可以用=号来进行克隆，其实没有 深度克隆一说， 这里用 valueOf 实现，语法上比较符合 规范。")]),t._v(" "),a("h2",{attrs:{id:"来讲讲-js-的闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#来讲讲-js-的闭包"}},[t._v("#")]),t._v(" 来讲讲 JS 的闭包")]),t._v(" "),a("p",[t._v("闭包是指有权访问另外一个函数作用域中的变量的函数。 闭包就是函数的局部变量集合，只是这些局部变量在函数返回后会继 续存在。闭包就是就是函数的“堆栈”在函数返回后并不释放，我们 也可以理解为这些函数堆栈并不在栈上分配而是在堆上分配。当在一 个函数内定义另外一个函数就会产生闭包。")]),t._v(" "),a("p",[t._v("为什么要用： 匿名自执行函数：我们知道所有的变量，如果不加上 var 关键字，则 默认的会添加到全局对象的属性上去，这样的临时变量加入全局对象 有很多坏处，比如：别的函数可能误用这些变量；造成全局对象过于 庞大，影响访问速度(因为变量的取值是需要从原型链上遍历的)。除 了每次使用变量都是用 var 关键字外，我们在实际情况下经常遇到 这样一种情况，即有的函数只需要执行一次，其内部变量无需维护， 可以用闭包。")]),t._v(" "),a("p",[t._v("结果缓存：我们开发中会碰到很多情况，设想我们有一个处理过程很耗时的函数对象， 每次调用都会花费很长时间，那么我们就需要将 计算出来的值存储起来，当调用这个函数的时候，首先在缓存中查找， 如果找不到，则进行计算，然后更新缓存并返回值，如果找到了，直 接返回查找到的值即可。闭包正是可以做到这一点，因为它不会释放 外部的引用，从而函数内部的值可以得以保留。")]),t._v(" "),a("h2",{attrs:{id:"js-中-call-与-apply-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-中-call-与-apply-区别"}},[t._v("#")]),t._v(" Js 中.call()与.apply()区别")]),t._v(" "),a("p",[t._v("apply：调用一个对象的一个方法，用另一个对象替换当前对象。"),a("br"),t._v("\ncall：调用一个对象的一个方法，用另一个对象替换当前对象。")]),t._v(" "),a("p",[t._v("从定义中可以看出，call 和 apply 都是调用一个对象的一个方法，用另一 个对象替换当前对象。而不同之处在于传递的参数，apply 最多只能有两 个参数——新 this 对象和一个数组 argArray，如果 arg 不是数组则会报错")]),t._v(" "),a("p",[t._v("相同点: 两个方法产生的作用是完全一样的。call, apply 作用就是借用别 人的方法来调用,就像调用自己的一样"),a("br"),t._v("\n不同点: 方法传递的参数不同")]),t._v(" "),a("h2",{attrs:{id:"为什么会造成跨域-请简述同源策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么会造成跨域-请简述同源策略"}},[t._v("#")]),t._v(" 为什么会造成跨域/请简述同源策略")]),t._v(" "),a("p",[t._v("出现跨域问题的原因: 在前后端分离的模式下，前后端的域名是不一致的，此时就会发生跨域 访问问题。在请求的过程中我们要想回去数据一般都是 post/get 请求， 所以..跨域问题出现")]),t._v(" "),a("p",[t._v("跨域问题来源于 JavaScript 的同源策略，即只有 协议+主机名+端口号 (如存在)相同，则允许相互访问。也就是说 JavaScript 只能访问和操作自 己域下的资源，不能访问和操作其他域下的资源。")]),t._v(" "),a("p",[t._v("同源策略 是由 NetScape 提出的一个著名的安全策略。所谓的同源，指 的是协议，域名，端口相同。浏览器处于安全方面的考虑，只允许本域 名下的接口交互，不同源的客户端脚本，在没有明确授权的情况下，不 能读写对方的资源。")]),t._v(" "),a("h2",{attrs:{id:"请输出三种减少页面加载时间的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请输出三种减少页面加载时间的方式"}},[t._v("#")]),t._v(" 请输出三种减少页面加载时间的方式")]),t._v(" "),a("ol",[a("li",[t._v("优化图片")]),t._v(" "),a("li",[t._v("图像格式的选择（GIF：提供的颜色较少，可用在一些对颜色要求不高 的地方）")]),t._v(" "),a("li",[t._v("优化 CSS（压缩合并 css，如 margin-top, margin-left...)")]),t._v(" "),a("li",[t._v("网址后加斜杠（如 www.campr.com/目录，会判断这个目录是什么文 件类型，或者是目录。） cdn 托管")]),t._v(" "),a("li",[t._v("标明高度和宽度（如果浏览器没有找到这两个参数，它需要一边下载图片一边计算大小，如果图片很多，浏览器需要不断地调整页面。这不 但影响速度，也影响浏览体验。当浏览器知道了高度和宽度参数后，即使图片暂时无法显示，页面上也 会腾出图片的空位，然后继续加载后面的内容。从而加载时间快了，浏 览体验也更好了）")]),t._v(" "),a("li",[t._v("减少 http 请求（合并文件，合并图片）")])]),t._v(" "),a("h2",{attrs:{id:"this-指向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this-指向"}},[t._v("#")]),t._v(" This 指向")]),t._v(" "),a("p",[t._v("在 JavaScript 中，this 通常指向的是我们正在执行的函数本身，或者是， 指向该函数所属的对象。")]),t._v(" "),a("ul",[a("li",[t._v("全局的 this → 指向的是 Window")]),t._v(" "),a("li",[t._v("对象中的 this → 指向其本身")]),t._v(" "),a("li",[t._v("事件中 this → 指向事件对象")])]),t._v(" "),a("h2",{attrs:{id:"什么是-jsonp-工作原理是什么-他为什么不-是真正的-ajax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-jsonp-工作原理是什么-他为什么不-是真正的-ajax"}},[t._v("#")]),t._v(" 什么是 jsonp 工作原理是什么？他为什么不 是真正的 ajax")]),t._v(" "),a("p",[t._v("Jsonp 其实就是一个跨域解决方案。"),a("br"),t._v("\nJs 跨域请求数据是不可以的，但是 js 跨域请求 js 脚本是可以的。 所以可以把要请求的数据封装成一个 js 语句，做一个方法的调用。 跨域请求 js 脚本可以得到此脚本。得到 js 脚本之后会立即执行。 可以把数据做为参数传递到方法中。就可以获得数据。从而解决跨域问题。"),a("br"),t._v("\njsonp 原理：(动态创建 script 标签，回调函数) 浏览器在 js 请求中，是允许通过 script 标签的 src 跨域请求，可以在请 求的结果中添加回调方法名，在请求页面中定义方法，就可获取到跨域 请求的数据。")]),t._v(" "),a("p",[t._v("为什么不是真正的 ajax?")]),t._v(" "),a("ol",[a("li",[t._v('ajax 和 jsonp 这两种技术在调用方式上"看起来"很像，目的也一样， 都是请求一个 url，然后把服务器返回的数据进行处理，因此 jquery 和 ext 等框架都把 jsonp 作为 ajax 的一种形式进行了封装；')]),t._v(" "),a("li",[t._v("但 ajax 和 jsonp 其实本质上是不同的东西。ajax 的核心是通过 XmlHttpRequest获取本页内容，而jsonp的核心则是动态添加"),a("script")])])])}),[],!1,null,null,null);s.default=r.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{379:function(t,s,a){"use strict";a.r(s);var e=a(49),v=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"_20201102-面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20201102-面试题"}},[t._v("#")]),t._v(" 20201102 面试题")]),t._v(" "),a("h4",{attrs:{id:"问题描述-什么是闭包-如何使用它-为会要使用它"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题描述-什么是闭包-如何使用它-为会要使用它"}},[t._v("#")]),t._v(" 问题描述：什么是闭包, 如何使用它, 为会要使用它?")]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("参考答案")]),t._v(" "),a("p",[t._v("闭包就是能够读取其他函数内部变量的函数。由于在 "),a("code",[t._v("Javascript")]),t._v(" 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成 “定义在一个函数内部的函数”。")]),t._v(" "),a("p",[t._v("所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("使用闭包的注意点：")]),t._v(" "),a("ul",[a("li",[t._v("由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。")]),t._v(" "),a("li",[t._v("闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（ "),a("code",[t._v("object")]),t._v(" ）使用，把闭包当作它的公用方法（ "),a("code",[t._v("Public Method")]),t._v(" ），把内部变量当作它的私有属性（ "),a("code",[t._v("private value")]),t._v(" ），这时一定要小心，不要随便改变父函数内部变量的值。")])])])])}),[],!1,null,null,null);s.default=v.exports}}]);